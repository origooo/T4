        -:    0:Source:test_calc_h.c
        -:    0:Graph:testsuite.gcno
        -:    0:Data:testsuite.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../../src/calc.h"
        -:    2:
        -:    3:CalcStatePtr calc = NULL;
        -:    4:
        -:    5:void testClear();
        -:    6:
        -:    7:/* Set up and clean up test suite */
        -:    8:
function init_suite called 1 returned 100% blocks executed 100%
        1:    9:int init_suite(void) {
        1:   10:  calc = mkCalcState();
call    0 returned 100%
        1:   11:  return calc == NULL;
        -:   12:}
        -:   13:
function clean_suite called 1 returned 100% blocks executed 100%
        1:   14:int clean_suite(void) {
        1:   15:  freeCalcState(calc);
call    0 returned 100%
        1:   16:  calc=NULL;
        1:   17:  return 0;
        -:   18:}
        -:   19:
function testUnsignedIntLimits called 1 returned 100% blocks executed 100%
        1:   20:void testUnsignedIntLimits(void){
        -:   21:  //Reset buffer first.
        1:   22:  testClear();
call    0 returned 100%
        -:   23:  //Testing unisnged int
        1:   24:  pressDigit(calc, '4');
call    0 returned 100%
        1:   25:  pressDigit(calc, '2');
call    0 returned 100%
        1:   26:  pressDigit(calc, '9');
call    0 returned 100%
        1:   27:  pressDigit(calc, '4');
call    0 returned 100%
        1:   28:  pressDigit(calc, '9');
call    0 returned 100%
        1:   29:  pressDigit(calc, '6');
call    0 returned 100%
        1:   30:  pressDigit(calc, '7');
call    0 returned 100%
        1:   31:  pressDigit(calc, '2');
call    0 returned 100%
        1:   32:  pressDigit(calc, '9');
call    0 returned 100%
        1:   33:  pressDigit(calc, '4');
call    0 returned 100%
        1:   34:  CU_ASSERT(!strcmp(getBuffer(calc), "4294967294"));
call    0 returned 100%
call    1 returned 100%
        -:   35:
        1:   36:  pressPlus(calc);
call    0 returned 100%
        1:   37:  pressDigit(calc, '1');
call    0 returned 100%
        1:   38:  pressExec(calc);
call    0 returned 100%
        -:   39:  //Should fail because the int has overflowed, this should just 
        -:   40:  //add 1 as expected
        1:   41:  CU_ASSERT(!strcmp(getBuffer(calc), "4294967295"));
call    0 returned 100%
call    1 returned 100%
        1:   42:}
        -:   43:
function testSignedIntLimits called 1 returned 100% blocks executed 100%
        1:   44:void testSignedIntLimits(void){
        -:   45:
        1:   46:  testClear();
call    0 returned 100%
        -:   47:  //testing singed int
        1:   48:  pressDigit(calc, '2');
call    0 returned 100%
        1:   49:  pressDigit(calc, '1');
call    0 returned 100%
        1:   50:  pressDigit(calc, '4');
call    0 returned 100%
        1:   51:  pressDigit(calc, '7');
call    0 returned 100%
        1:   52:  pressDigit(calc, '4');
call    0 returned 100%
        1:   53:  pressDigit(calc, '8');
call    0 returned 100%
        1:   54:  pressDigit(calc, '3');
call    0 returned 100%
        1:   55:  pressDigit(calc, '6');
call    0 returned 100%
        1:   56:  pressDigit(calc, '4');
call    0 returned 100%
        1:   57:  pressDigit(calc, '7');
call    0 returned 100%
        1:   58:  CU_ASSERT(!strcmp(getBuffer(calc), "2147483647"));
call    0 returned 100%
call    1 returned 100%
        -:   59:
        1:   60:  pressPlus(calc);
call    0 returned 100%
        1:   61:  pressDigit(calc, '1');
call    0 returned 100%
        1:   62:  pressExec(calc);
call    0 returned 100%
        -:   63:  //Again, like the Unsigned version, the calculator should be able to handle
        -:   64:  //larger numbers than this. 
        1:   65:  CU_ASSERT(!strcmp(getBuffer(calc), "2147483648"));
call    0 returned 100%
call    1 returned 100%
        1:   66:}
        -:   67:
function testClear called 10 returned 100% blocks executed 100%
       10:   68:void testClear(void){
       10:   69:  pressReset(calc);
call    0 returned 100%
       10:   70:  CU_ASSERT(!strcmp(getBuffer(calc), ""));
call    0 returned 100%
call    1 returned 100%
       10:   71:}
        -:   72:
function testEquation called 1 returned 100% blocks executed 100%
        1:   73:void testEquation(void){
        -:   74:  //Test that it computes when another operand is pressed
        -:   75:  //After a one is pressed before hand.
        1:   76:  testClear();
call    0 returned 100%
        1:   77:  pressDigit(calc, '2');
call    0 returned 100%
        1:   78:  pressMult(calc);
call    0 returned 100%
        1:   79:  pressDigit(calc, '2');
call    0 returned 100%
        1:   80:  CU_ASSERT(!strcmp(getBuffer(calc), "2"));
call    0 returned 100%
call    1 returned 100%
        1:   81:  pressMult(calc);
call    0 returned 100%
        1:   82:  CU_ASSERT(!strcmp(getBuffer(calc), "4"));
call    0 returned 100%
call    1 returned 100%
        1:   83:  pressDigit(calc, '2');
call    0 returned 100%
        1:   84:  pressExec(calc);
call    0 returned 100%
        1:   85:  CU_ASSERT(!strcmp(getBuffer(calc), "8"));
call    0 returned 100%
call    1 returned 100%
        -:   86:
        1:   87:  testClear();
call    0 returned 100%
        1:   88:  pressDigit(calc, '3');
call    0 returned 100%
        1:   89:  pressMult(calc);
call    0 returned 100%
        1:   90:  pressExec(calc);
call    0 returned 100%
        1:   91:  CU_ASSERT(!strcmp(getBuffer(calc), "9"));
call    0 returned 100%
call    1 returned 100%
        -:   92:
        1:   93:}
        -:   94:
function testNegatives called 1 returned 100% blocks executed 100%
        1:   95:void testNegatives()
        -:   96:{
        1:   97:  testClear();
call    0 returned 100%
        1:   98:  pressDigit(calc, '2');
call    0 returned 100%
        1:   99:  pressMinus(calc);
call    0 returned 100%
        1:  100:  pressDigit(calc, '4');
call    0 returned 100%
        1:  101:  pressExec(calc);
call    0 returned 100%
        1:  102:  CU_ASSERT(!strcmp(getBuffer(calc), "-2"));
call    0 returned 100%
call    1 returned 100%
        -:  103:  //Assume that it should be negative.
        1:  104:  CU_ASSERT(calc->bufferNegative == 1);
call    0 returned 100%
        1:  105:}
        -:  106:
function testPlus called 1 returned 100% blocks executed 100%
        1:  107:void testPlus() {
        -:  108: //plus
        1:  109:  testClear();
call    0 returned 100%
        1:  110:  pressDigit(calc, '2');
call    0 returned 100%
        1:  111:  CU_ASSERT(!strcmp(getBuffer(calc), "2"));
call    0 returned 100%
call    1 returned 100%
        1:  112:  pressPlus(calc);
call    0 returned 100%
        1:  113:  pressDigit(calc, '4');
call    0 returned 100%
        1:  114:  pressExec(calc);
call    0 returned 100%
        1:  115:  CU_ASSERT(!strcmp(getBuffer(calc), "6"));
call    0 returned 100%
call    1 returned 100%
        1:  116:}
        -:  117:
function testMin called 1 returned 100% blocks executed 100%
        1:  118:void testMin() {
        -:  119: //min
        1:  120:  testClear();
call    0 returned 100%
        1:  121:  pressDigit(calc, '1');
call    0 returned 100%
        1:  122:  CU_ASSERT(!strcmp(getBuffer(calc), "1"));
call    0 returned 100%
call    1 returned 100%
        1:  123:  pressMinus(calc);
call    0 returned 100%
        1:  124:  pressDigit(calc, '1');
call    0 returned 100%
        1:  125:  pressExec(calc);
call    0 returned 100%
        1:  126:  CU_ASSERT(!strcmp(getBuffer(calc), "0"));
call    0 returned 100%
call    1 returned 100%
        1:  127:}
        -:  128:
function testMul called 1 returned 100% blocks executed 100%
        1:  129:void testMul() {
        -:  130: //mul
        1:  131:  testClear();
call    0 returned 100%
        1:  132:  pressDigit(calc, '4');
call    0 returned 100%
        1:  133:  CU_ASSERT(!strcmp(getBuffer(calc), "4"));
call    0 returned 100%
call    1 returned 100%
        1:  134:  pressMult(calc);
call    0 returned 100%
        1:  135:  pressDigit(calc, '4');
call    0 returned 100%
        1:  136:  pressExec(calc);
call    0 returned 100%
        1:  137:  CU_ASSERT(!strcmp(getBuffer(calc), "16"));
call    0 returned 100%
call    1 returned 100%
        1:  138:}
        -:  139:
function testDiv called 1 returned 100% blocks executed 100%
        1:  140:void testDiv() {
        -:  141:  //div
        1:  142:  testClear();
call    0 returned 100%
        1:  143:  pressDigit(calc, '1');
call    0 returned 100%
        1:  144:  pressDigit(calc, '6');
call    0 returned 100%
        1:  145:  CU_ASSERT(!strcmp(getBuffer(calc), "16"));
call    0 returned 100%
call    1 returned 100%
        1:  146:  pressDiv(calc);
call    0 returned 100%
        1:  147:  pressDigit(calc, '4');
call    0 returned 100%
        1:  148:  pressExec(calc);
call    0 returned 100%
        1:  149:  CU_ASSERT(!strcmp(getBuffer(calc), "4"));
call    0 returned 100%
call    1 returned 100%
        1:  150:}
        -:  151:
function testMaxBuffer called 1 returned 100% blocks executed 100%
        1:  152:void testMaxBuffer() {
        1:  153:  testClear();
call    0 returned 100%
        1:  154:  pressDigit(calc, '1');
call    0 returned 100%
        1:  155:  pressDigit(calc, '2');
call    0 returned 100%
        1:  156:  pressDigit(calc, '3');
call    0 returned 100%
        1:  157:  pressDigit(calc, '4');
call    0 returned 100%
        1:  158:  pressDigit(calc, '5');
call    0 returned 100%
        1:  159:  pressDigit(calc, '6');
call    0 returned 100%
        1:  160:  pressDigit(calc, '7');
call    0 returned 100%
        1:  161:  pressDigit(calc, '8');
call    0 returned 100%
        1:  162:  pressDigit(calc, '9');
call    0 returned 100%
        1:  163:  pressDigit(calc, '1');
call    0 returned 100%
        1:  164:  pressDigit(calc, '2');
call    0 returned 100%
        1:  165:  pressDigit(calc, '3');
call    0 returned 100%
        1:  166:  pressDigit(calc, '4');
call    0 returned 100%
        1:  167:  pressDigit(calc, '5');
call    0 returned 100%
        1:  168:  pressDigit(calc, '6');
call    0 returned 100%
        1:  169:  CU_ASSERT(!strcmp(getBuffer(calc), "123456789123456"));
call    0 returned 100%
call    1 returned 100%
        -:  170:
        1:  171:  pressDigit(calc, '1');
call    0 returned 100%
        1:  172:  CU_ASSERT(!strcmp(getBuffer(calc), "[error]"));
call    0 returned 100%
call    1 returned 100%
        1:  173:  CU_ASSERT(calc->err == 1);
call    0 returned 100%
        1:  174:}
        -:  175:
